Wavemaker learning
1. UI Layer
2. Binding Layer
3. Service layer

Everything we have at the Service layer will be exposed as API.

Binding layer responsible to connect UI & Service, It gets the data from the Service and maps to particular widgets or collects data from UI and sends to backend

If widgets don't cover our usecase, we can always build our own component called as Prefabs(these are reusable)

Creating an Employee Profile application

Employee profile -----HR_API(Swagger)(REST API) - created HR_API app for this
		 -----GMaps API(REST API)
		 -----Countries_API(SOAP API)
		 -----HeartRate_API(Web Socket) 

Uploaded a data dump for HR_API
WM automatically generates default CRUD apis for it in API section with same name.

Folder Structure
1. i18n - stores literals file for language.
2. lib (libraries folder) - list external dependencies used in project 
3. profiles
4. services - example - HRAPI\designtime\HR_API.json(swagger file)


White canvas
1. Design - drag and drop widgets to make UI
2. Markup - automatically generates code for dragged widgets
3. Script - logics can be written here
4. Style - page level styling(not recommended)

after widget dragged, right side-we see widget properties


importing an API

imported API,now if tested it gives error, cuz we didn't provide host

provide host and base path, ok now if tested , api will give response

Till now what has been done,
1. we have created 2 applications, one in which HR_API is defined, next in which Employee Profile will be shown(this application will consume APIs)
2. In HR_API it is connected to a database & is exposiong the API, we have deployed this application & made this deployed application available. 
3. The Swagger file that has been generated by the WaveMaker in HR_API has been imported into the new application i.e. Employee Profile.

-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x--x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-

Started building images\9_final_app
1. designed left navigation - upon clicking on Employees , user shoould be able to navigate to Employees page.
2. used container(grid layout) to design in center.
3. Now creating variable(gave name as swgGetEmployees) to bind data
4. Variable can be ---- Database CRUD
		   ---- APIs(Imported APIs, Database APIS, Web Service, Java Service, Security Service)
		   ---- Model
5. Selected Imported APIs(HR_API)
6. Used List widget inside grid layout 
7. Selected Retrieve data from Existing varibale(swgGetEmployees)
8. Selected template and binded values using particular fields
9. Now we can see list of Employees, with name, job title & profile picture. 
10. Refer images\11_employee_list - done till here.
11. Look at images\12_varibale_apiCall - if we don't select Request list data on page load - variable will not make API & we can't see data in network tab & application.
12. So select Request list data option
13. 

